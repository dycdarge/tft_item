{"version":3,"sources":["images/bf_sword_list.jpg","images/chainvest_list.jpg","images/giantsbelt_list.jpg","images/largerod_list.jpg","images/negatron_list.jpg","images/recurve_list.jpg","images/tear_list.jpg","images/spatula_list.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","img_src","handleClick","bind","assertThisInitialized","id","img","bf_list","chainvest","giantsbelt","largerod","negatron","recurve","tear","spatula","setState","_this2","react_default","a","createElement","className","onClick","e","src","class","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uXCYnBC,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,MAGXR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IANFA,2EASPY,GAEV,IAAIC,EACJ,OAAOD,GAEL,KAAK,EACHC,EAAMC,IACN,MACF,KAAK,EACHD,EAAME,IACN,MACF,KAAK,EACHF,EAAMG,IACN,MACF,KAAK,EACHH,EAAMI,IACN,MACF,KAAK,EACHJ,EAAMK,IACN,MACF,KAAK,EACHL,EAAMM,IACN,MACF,KAAK,EACHN,EAAMO,IACN,MACF,KAAK,EACHP,EAAMQ,IAKVlB,KAAKmB,SAAS,CACZd,QAASK,qCAGJ,IAAAU,EAAApB,KACT,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC7De,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC/De,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAChEe,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC9De,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC9De,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC7De,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAOC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC1De,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUC,QAAS,SAACC,GAAD,OAAON,EAAKd,YAAY,MAC/De,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,OAAKI,IAAK3B,KAAKI,MAAMC,QAASuB,MAAM,SAASC,IAAI,eA1D9BC,cCAbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92b6e2ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bf_sword_list.d702cad0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chainvest_list.c5c87d4d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/giantsbelt_list.b3c8a065.jpg\";","module.exports = __webpack_public_path__ + \"static/media/largerod_list.00658b35.jpg\";","module.exports = __webpack_public_path__ + \"static/media/negatron_list.bd4184ec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/recurve_list.d4a05ca9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tear_list.558a7b2e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spatula_list.e3da1cfa.jpg\";","import React, { Component } from 'react';\nimport bf_list from './images/bf_sword_list.jpg';\nimport chainvest from './images/chainvest_list.jpg';\nimport giantsbelt from './images/giantsbelt_list.jpg';\nimport largerod from './images/largerod_list.jpg';\nimport negatron from './images/negatron_list.jpg';\nimport recurve from './images/recurve_list.jpg';\nimport tear from './images/tear_list.jpg';\nimport spatula from './images/spatula_list.jpg'\nimport './App.css';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img_src: null\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(id)\n  {\n    let img;\n    switch(id)\n    {\n      case 1:\n        img = bf_list\n        break;\n      case 2:\n        img = chainvest\n        break;\n      case 3:\n        img = giantsbelt\n        break;\n      case 4:\n        img = largerod\n        break;\n      case 5: \n        img = negatron\n        break;\n      case 6:\n        img = recurve\n        break;  \n      case 8:\n        img = tear\n        break;\n      case 9:\n        img = spatula\n        break;\n      default:\n        break;  \n    }\n    this.setState({\n      img_src: img\n    })\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <button className=\"bfsword\" onClick={(e) => this.handleClick(1)}/>\n          <button className=\"chainvest\" onClick={(e) => this.handleClick(2)}/>\n          <button className=\"giantsbelt\" onClick={(e) => this.handleClick(3)}/>\n          <button className=\"largerod\" onClick={(e) => this.handleClick(4)}/>\n          <button className=\"negatron\" onClick={(e) => this.handleClick(5)}/>\n          <button className=\"recurve\" onClick={(e) => this.handleClick(6)}/>\n          <button className=\"tear\" onClick={(e) => this.handleClick(8)}/>\n          <button className=\"spatula\" onClick={(e) => this.handleClick(9)}/>\n        <div ><img src={this.state.img_src} class=\"resize\" alt=\"\" /></div>\n      </header>\n    </div>\n  );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}